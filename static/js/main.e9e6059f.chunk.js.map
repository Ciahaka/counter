{"version":3,"sources":["components/Counter.module.css","App.module.css","components/Button.module.css","components/Button.tsx","components/ChangeMaxValue.tsx","components/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","props","className","s","button","onClick","callBack","disabled","name","ChangeMaxValue","useState","valueMax","setValueMax","addMax","setAddMax","type","value","onChange","e","currentTarget","valueAsNumber","onBlur","activationChangeValue","autoFocus","number","maxValue","numberRed","onDoubleClick","Counter","count","newValue","newMaxValue","buttons","callBackHandlerIncrement","callBackHandlerReset","startValue","App","stateCounter","setStateCounter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,MAAQ,uBAAuB,OAAS,wBAAwB,UAAY,2BAA2B,QAAU,2B,mBCAnID,EAAOC,QAAU,CAAC,IAAM,mB,gBCAxBD,EAAOC,QAAU,CAAC,OAAS,yB,qJCOdC,EAAS,SAACC,GAMnB,OACI,wBAAQC,UAAWC,IAAEC,OACnBC,QANiB,WACnBJ,EAAMK,YAMEC,SAAUN,EAAMM,SAFxB,SAIKN,EAAMO,Q,gBCTNC,EAAiB,SAACR,GAA0B,IAAD,EACzBS,oBAAS,GADgB,mBAC/CC,EAD+C,KACtCC,EADsC,OAE5BF,mBAAS,GAFmB,mBAE/CG,EAF+C,KAExCC,EAFwC,KAetD,OAAOH,EACH,uBAAOI,KAAK,SAASC,MAAOH,EAAQI,SAHnB,SAACC,GAAD,OAAmCJ,EAAUI,EAAEC,cAAcC,gBAGfC,OAR3C,WAExBT,GAAY,GACZX,EAAMqB,sBAAsBT,IAKkEU,WAAS,IACnG,uBAAMrB,UAAWD,EAAMuB,SAAWvB,EAAMwB,SAAWtB,IAAEuB,UAAY,GAAIC,cAbhD,WACvBf,GAAY,GACZE,EAAUb,EAAMwB,WAWd,UAAuGxB,EAAMuB,OAA7G,QCZOI,EAAU,SAAC3B,GAMtB,OACE,sBAAKC,UAAWC,IAAE0B,MAAlB,UACE,qBAAK3B,UAAWC,IAAEqB,OAAlB,SACE,cAAC,EAAD,CACEA,OAAQvB,EAAMuB,OACdC,SAAUxB,EAAMwB,SAChBH,sBAVe,SAACQ,GACtB7B,EAAM8B,YAAYD,QAchB,sBAAK5B,UAAWC,IAAE6B,QAAlB,UACE,cAAC,EAAD,CAAQxB,KAAK,MACLF,SAAUL,EAAMgC,yBAChB1B,SAAUN,EAAMuB,SAAWvB,EAAMwB,WAIzC,cAAC,EAAD,CAAQjB,KAAK,QACLF,SAAUL,EAAMiC,qBAChB3B,SAAUN,EAAMuB,SAAWvB,EAAMkC,oBCDlCC,MAnCf,WAAgB,IAAD,EAE2B1B,mBAAiB,GAF5C,mBAEN2B,EAFM,KAEQC,EAFR,KAGTb,EAAW,EAkBf,OACE,qBAAKvB,UAAWC,IAAEiC,IAAlB,SACE,cAAC,EAAD,CAASZ,OAAQa,EACRH,qBAPQ,kBAAMI,EAAgB,IAQ9BL,yBATK,kBAAMR,EAAWa,EAAgBD,EAAe,GAAK,IAU1DF,WAtBM,EAuBNV,SAAUA,EACVM,YApBc,SAACD,GAK1B,OAJIA,IACFL,EAAWK,EACXQ,EAAgBR,IAEXO,QCJIE,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e9e6059f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"count\":\"Counter_count__1Wwgc\",\"number\":\"Counter_number__FMYnl\",\"numberRed\":\"Counter_numberRed__qr7Mb\",\"buttons\":\"Counter_buttons__1lfK4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__IUJQB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__ZzycM\"};","import s from \"./Button.module.css\"\n\ntype propsButton = {\n    name: string\n    callBack: ()=> void\n    disabled: boolean\n}\n\nexport const Button = (props: propsButton)=> {\n\n    const onClickHandler = ()=> {\n        props.callBack()\n    }\n\n    return (\n        <button className={s.button}\n          onClick={onClickHandler}\n                disabled={props.disabled}\n                >\n            {props.name}\n        </button>\n    )\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport s from './Counter.module.css';\r\n\r\n\r\nexport type ValuePropsType = {\r\n  number: number\r\n  maxValue:number\r\n  activationChangeValue:(addMax:number)=>void\r\n}\r\n\r\nexport const ChangeMaxValue = (props:ValuePropsType) => {\r\n  const [valueMax,setValueMax]=useState(false)\r\n  const [addMax,setAddMax] =useState(0)\r\n\r\n  const magicSpanHandler = () => {\r\n    setValueMax(true)\r\n    setAddMax(props.maxValue)\r\n  }\r\nconst backToSpanHandler = () => {\r\n\r\n  setValueMax(false)\r\n  props.activationChangeValue(addMax)\r\n}\r\nconst changMaxHandler =(e:ChangeEvent<HTMLInputElement>)=>setAddMax(e.currentTarget.valueAsNumber)\r\n\r\n  return valueMax\r\n    ? <input type=\"number\" value={addMax} onChange={changMaxHandler} onBlur={backToSpanHandler} autoFocus/>\r\n    : <span className={props.number === props.maxValue ? s.numberRed : ''} onDoubleClick={magicSpanHandler}>{props.number} </span>\r\n\r\n};\r\n","import React from 'react';\nimport {Button} from './Button';\nimport s from './Counter.module.css'\nimport {ChangeMaxValue} from './ChangeMaxValue';\n\nexport type propsType = {\n  number: number\n  callBackHandlerReset: () => void\n  callBackHandlerIncrement: () => void\n  startValue: number\n  maxValue: number\n  newMaxValue:(newValue: number)=>void\n}\n\n\nexport const Counter = (props: propsType) => {\n\n  const changeMaxValue = (newValue: number) => {\n    props.newMaxValue(newValue)\n  }\n\n  return (\n    <div className={s.count}>\n      <div className={s.number}>\n        <ChangeMaxValue\n          number={props.number}\n          maxValue={props.maxValue}\n          activationChangeValue={changeMaxValue}\n\n\n        />\n      </div>\n      <div className={s.buttons}>\n        <Button name=\"inc\"\n                callBack={props.callBackHandlerIncrement}\n                disabled={props.number === props.maxValue}\n\n\n        />\n        <Button name=\"reset\"\n                callBack={props.callBackHandlerReset}\n                disabled={props.number === props.startValue}\n        />\n      </div>\n    </div>\n  )\n\n}","import React, {useState} from 'react'\r\nimport s from './App.module.css'\r\nimport {Counter} from './components/Counter';\r\n\r\n\r\nfunction App() {\r\n\r\n  const [stateCounter, setStateCounter] = useState<number>(0)\r\n  let maxValue = 5\r\n  const startValue = 0\r\n\r\n\r\n\r\n  const newMaxValueHandler = (newValue:number) => {\r\n    if (newValue) {\r\n      maxValue = newValue\r\n      setStateCounter(newValue)\r\n    }\r\n    return stateCounter\r\n  }\r\n\r\n  const Increment = () => maxValue ? setStateCounter(stateCounter + 1) : ''\r\n  const resetCounter = () => setStateCounter(0)\r\n\r\n\r\n\r\n  return (\r\n    <div className={s.App}>\r\n      <Counter number={stateCounter}\r\n               callBackHandlerReset={resetCounter}\r\n               callBackHandlerIncrement={Increment}\r\n               startValue={startValue}\r\n               maxValue={maxValue}\r\n               newMaxValue={newMaxValueHandler}\r\n\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}